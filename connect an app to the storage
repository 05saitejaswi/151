To connect an app to the storage we've set up, we need a few things from each storage service.

From the SQL server and database:

SQL Server server name (the name of the sql server with .database.windows.net appended to it)
Admin username
Admin password
SQL Database name
From blob storage:

Storage account name
A storage account access key
Container name
In our case, we're keeping the management of these values a bit simpler with a config.py file that will be imported into the primary app file.

Azure Storage Blob Library for Python

In order to interact with our Azure blob storage from within the Python web app, we'll need the Azure Storage Blob Library. Note that you can install this with pip install azure-storage-blob, and you'll need to make sure to include the library in your requirements.txt file in your own apps.

We will largely focus on the BlobServiceClient class. This class has three methods weâ€™ll use:

get_blob_client - creates a blob client using the filename as the name for the blob
upload_blob - upload the file to the blob container
delete_blob - delete a blob from a blob container
Uploading a blob
Here is the code I included for uploading a blob.

from azure.storage.blob import BlobServiceClient

blob_container = app.config['BLOB_CONTAINER']
storage_url = "https://{}.blob.core.windows.net/".format(app.config['BLOB_ACCOUNT'])
blob_service = BlobServiceClient(account_url=storage_url, credential=app.config['BLOB_STORAGE_KEY'])

blob_client = blob_service.get_blob_client(container=blob_container, blob=filename)
blob_client.upload_blob(file)
Note that I am getting the BLOB_CONTAINER name from the configuration file, which was attached to the Flask app separately. I do a similar procedure for getting the BLOB_ACCOUNT AND BLOB_STORAGE_KEY where needed. I then use the aforementioned get_blob_client and upload_blob functions to upload a file.

You might notice that there is a filename and file used here - these are not the same things! The filename is just the name of the file, e.g. test_image.png, while the file is the actual file object. So, the blob client is first called to create a blob with the given filename, and then the file is uploaded into that filename blob.

Deleting a blob
Assuming you've already defined the blob_service from before, you just need to get a new blob client with get_blob_client for the related container and filename, then delete_blob.

blob_client = blob_service.get_blob_client(container=blob_container, blob=filename)
blob_client.delete_blob()
It's important to note here you don't need a file to feed to delete_blob - by specifying the filename when you get_blob_client, it already knows what blob you are referring to.

