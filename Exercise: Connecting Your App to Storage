Exercise: Connecting Your App to Storage
In this exercise, you'll be given an application for a virtual zoo, and asked to add connections to your earlier deployed SQL database and Blob Storage to populate the zoo application.

If you already closed down your database and blob storage, you'll want to go back and re-create them before getting started.

Download the starter code for the app here.

First, familiarize yourself at least with the views.py file in the FlaskExercise directly, although you may also want to check out the other files. You can see an example screenshot of the deployed application below.
An example of the connected UdaciZoo app, including names, images, scientific names, and descriptions for each animal.
An example of the connected app

Next, add the necessary environment variables to connect to the SQL database in config.py.
Then, add the necessary environment variables to connect to the Blob storage container in config.py.
Add the necessary code in models.py to work with the BlobServiceClient to upload new images and delete any images that are replaced.
Run the app on your local machine, and check that the animals are correctly populated from the SQL database.
Add some images for each animal. You should be able to check back in your blob container and see that new images were added, and they should populate back to the main page.
While it's not a required part of this exercise, you can also try to deploy the app using either an app service or virtual machine; you shouldn't need any additional changes specific to the storage connections, but other changes may be necessary.

Troubleshooting
Mac users may need to install unixodbc as well as related drivers as shown below:
  brew install unixodbc
Check here to add SQL Server drivers for Mac. This StackOverflow post may also help resolve certain issues.
Supporting Materials


Solution: Connecting Your App to Storage

To connect with the SQL Database:

Within config.py, fill out the:
SQL_SERVER with the URL of your SQL Server, e.g. {YOUR-SQL_SERVER}.database.windows.net
SQL_DATABASE with the name of your SQL Database
SQL_USER_NAME with the username for your SQL Server
SQL_PASSWORD with the password for your SQL Server
To connect to the Blob Storage Container:

Within config.py, fill out the:
BLOB_ACCOUNT with the name of your storage account (above the container level)
BLOB_STORAGE_KEY with the primary access key for your storage account. From the Azure portal, navigate to the storage account, and then under "Setting", click on "Access keys". Copy and paste the "Key" under "key1", including the double equal signs ("==") at the end.
BLOB_CONTAINER with the name of your blob container, likely images
Within models.py, you'll need to use the BlobServiceClient called blob_service to get a Blob Client using the container name and related filename, and then either upload or delete the blob as follows:
 try:
     blob_client = blob_service.get_blob_client(container=blob_container, blob=filename)
     blob_client.upload_blob(file)
     if self.image_path: # Get rid of old image, since it's replaced
         blob_client = blob_service.get_blob_client(container=blob_container, blob=self.image_path)
         blob_client.delete_blob()
Why to Use a Random Filename
You might be wondering why a random filename was chosen for our blob upload. Well, let's say you've created an app, and uploaded a tiger.png file to it. You give access to some of your friends to add more animals to it, and as a joke, they upload a picture of an elephant under the name tiger.png as well. Your original tiger image would be deleted and replaced.

Even outside of a friendly joke, it's quite likely as your app scales up to thousands (and hopefully millions!) of users, they will be uploading files with the same names as others, if you don't randomize them. With unique, random filenames, you won't have to worry about this issue.







conclustion
Key Term	Definition
Azure SQL Server	Azure SQL Databases must first have a SQL Server on which the database will be created. Multiple databases can be created on a single server.
Azure SQL Database	Used for storing structured, relational data.
Blob	A data type that can store unstructured (binary) data, and is used to store things like images or videos in a database. Blob is short for Binary Large Object.
Storage Account	This is the highest level of storage hierarchy for data objects like blobs, files, queues, and tables.
Container	A level of the storage hierarchy that helps organize blobs, such as splitting between image and video blobs. There can be multiple containers to one storage account.
Blob Storage	Use only for storing blob data.
Table Storage	Stores structured, non-relational data.
File Storage	Utilized for file sharing storage solutions.
Disk Storage	Utilized for disk-based storage, such as hard drive and solid-state memory disks.
Data Lake Storage	Utilized for data lakes used in big data analytics.
Hot Storage	Used for storing frequently accessed data.
Cool Storage	Used for storing infrequently accessed data and stored for at least 30 days.
Archive Storage	Used for storing data that will be rarely accessed and stored for at least 180 days. Access time latency may be very high.
HPC Cache	A cache used for faster access to certain data used for high performance compute, while leaving the rest of large datasets in other storage options.
CosmosDB	Azure's non-relational database service, capable of using different non-relational databases like MongoDB and Cassandra (covered in a later course).
Retention	How long to store a given piece of data or file for, such as 30 days.
